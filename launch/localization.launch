<launch>
    
    <!--- Sim Time -->
    <param name="/use_sim_time" value="true" />
    

    <!-- Start rviz with a pre-configured AerialMap instance. It will use the fake GPS fix from above. -->
    <node pkg="rviz" type="rviz" name="rviz" args="-d $(find lins)/launch/localization_demo.rviz"/>

    <!-- <include file="$(find rviz_satellite)/launch/demo.launch"/> -->

    <!-- LINS -->
    <!--- Config Path -->
    <arg name="config_path" default = "$(find lins)/config/exp_config/exp_port.yaml" />

    <!-- 每次更换地图只需要更换这里的文件目录地址即可 -->
    <arg name="file_path" default="$(env HOME)/Downloads/local_map/dongguan" />

    <arg name="init_pose" value = "$(arg file_path)/init_pose.yaml" />
    <!-- 注意高精度地图的文件名要一致 -->
    <arg name="osm_file" value = "$(arg file_path)/GDUT_2_josm.osm" />
    <arg name="Corner_map_path" value="$(arg file_path)/CornerMap.pcd" />
    <arg name="Surf_map_path" value="$(arg file_path)/SurfMap.pcd" />

    <node pkg="lins" type="image_projection_node"    name="image_projection_node"    output="screen">
        <param name="config_file" type="string" value="$(arg config_path)" />
    </node>

    <node pkg="lins" type="lins_fusion_node"    name="lins_fusion_node"    output="screen">
        <param name="config_file" type="string" value="$(arg config_path)" />
    </node>

    <!-- 纯雷达时如果为false会报错病态矩阵，未能找到问题原因 -->
    <!-- 原因：因子图起始的先验因子的信息矩阵太大，不能有效约束整个优化问题，一般起始的先验因子要使用强约束 -->
    <param name="useBetweenFactor" type="bool" value="true" />
    <param name="useGPSfactor" type="bool" value="false" />
    <!-- 这个数字取决于建图时是否融合GPS，如果建图时融合了GPS数据，则与建图节点的yaw_G2L相等 -->
    <!-- <param name="mappingCarYawPara" type="double" value="0.00" /> -->

    <!-- <node pkg="lego_loam" type="mapOptmization"     name="mapOptmization"     output="screen"/> -->
    <node pkg="lins" type="mapLocalization"     name="mapLocalization"     output="screen">
        <param name="config_file" type="string" value="$(arg config_path)" />
        <param name="init_pose" type="string" value="$(arg init_pose)" />
        <param name="Corner_map_path"     value="$(arg Corner_map_path)" type="string"/>
        <param name="Surf_map_path"       value="$(arg Surf_map_path)" type="string"/>
    </node>

    <!-- <node pkg="lins" type="transformFusion"    name="transformFusion"    output="screen"/> -->
    <node pkg="lins" type="transform_fusion_node"    name="transform_fusion_node"    output="screen">
        <param name="config_file" type="string" value="$(arg config_path)" />
        <param name="init_pose" type="string" value="$(arg init_pose)" />
    </node>

    <!-- Static fake TF transform -->
    <!-- for realtime -->
    <!-- <node pkg="tf2_ros" type="static_transform_publisher" name="static_tf_fake" args="0 0 0 0 0 0 /map /gps" />
    <node pkg="tf2_ros" type="static_transform_publisher" name="map_tf_camera_init" args="0 0 0 0.27 0 0 /map /pcl_map" /> -->
    <!--- TF -->
    <!-- if running realtime -->
    <!-- <node pkg="tf" type="static_transform_publisher" name="camera_init_to_map"  args="0 0 0 1.570795   0        1.570795 /map    /camera_init 100" />
    <node pkg="tf" type="static_transform_publisher" name="vehicle_to_camera" args="0 0 0 -1.570795 -1.570795 0        /camera /vehicle   100" /> -->
    <!-- <node pkg="tf" type="static_transform_publisher" name="vehicle_to_camera" args="0 0 0 0 0 0    /vehicle /rslidar  100" /> -->

    <!-- if running with rosbag -->
    <include file="$(find lins)/launch/staticTFpub.launch">
        <arg name="init_pose" value="$(arg init_pose)" />
        <arg name="osm_file" value="$(arg osm_file)" />
    </include>

</launch>
